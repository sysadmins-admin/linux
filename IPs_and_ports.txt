#!/bin/bash
# Devloped by sysadmins-admin

#######################################################
# Run Nmap scan and save it to a file. Once Nmap scan #
# is complete, pass it a file. The filename I am      #
# using here is nmap_page.txt.			      #
#######################################################

# Function Purpose: Scrapes all IPv4 ips from nmap scan and organizes them and groups them with their open ports.
function grp_ip_port(){

# Run initial parser on nmap file, output results to separate file.
# A drawback here is that the regex will pull numbers greater than 255 per octet.
# Building testfile here
cat nmap_page.txt | grep -E "[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}" -A22 | grep -vFe Host -vFe PORT -vFe closed -vFe MAC -vFe Network -vFe No -vFe Running -vFe CPE -vFe guesses -vFe general -vFe Warning -vFe fingerprint -vFe 'OS:' -vFe "-" -vFe "--" -vFe "---" > testfile

# Removes "Nmap scan report for" from lines containing ips without deleting the entire line.
# If entire line is deleted, then the ips would also get deleted.
sed -i 's/Nmap scan report for //g' testfile
}

# Function Purpose: Grabs all open ports and services
function read_file(){
# Grabs services and ports
input=testfile

# Read each line in the file
while IFS= read -r line
do

  echo "$line"
  echo " "
  grep -v "^$"

# Pulls just lines with desired content. Lines that do not contain IPv4 addresses.
done < "testfile" | grep -vE "[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}" | grep -ve "details"

}

function main(){
	grp_ip_port # Calls function which acts like IPv4 Scraper and organizer
	read_file > 1testfile.txt  # Calls read_file function and writes it to a file 
}
main

# Devloped by sysadmins-admin